# coding: utf-8

"""
    Gitea API

    This documentation describes the Gitea API.

    The version of the OpenAPI document: 1.24.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from py_gitea_opensuse_org.models.action_workflow_run import ActionWorkflowRun
from typing import Optional, Set
from typing_extensions import Self

class ActionArtifact(BaseModel):
    """
    ActionArtifact represents a ActionArtifact
    """ # noqa: E501
    archive_download_url: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    expired: Optional[StrictBool] = None
    expires_at: Optional[datetime] = None
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    size_in_bytes: Optional[StrictInt] = None
    updated_at: Optional[datetime] = None
    url: Optional[StrictStr] = None
    workflow_run: Optional[ActionWorkflowRun] = None
    __properties: ClassVar[List[str]] = ["archive_download_url", "created_at", "expired", "expires_at", "id", "name", "size_in_bytes", "updated_at", "url", "workflow_run"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActionArtifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of workflow_run
        if self.workflow_run:
            _dict['workflow_run'] = self.workflow_run.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActionArtifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archive_download_url": obj.get("archive_download_url"),
            "created_at": obj.get("created_at"),
            "expired": obj.get("expired"),
            "expires_at": obj.get("expires_at"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "size_in_bytes": obj.get("size_in_bytes"),
            "updated_at": obj.get("updated_at"),
            "url": obj.get("url"),
            "workflow_run": ActionWorkflowRun.from_dict(obj["workflow_run"]) if obj.get("workflow_run") is not None else None
        })
        return _obj


