# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator

class CreateHookOption(BaseModel):
    """
    CreateHookOption options when create a hook
    """
    active: Optional[StrictBool] = False
    authorization_header: Optional[StrictStr] = None
    branch_filter: Optional[StrictStr] = None
    config: Dict[str, StrictStr] = Field(..., description="CreateHookOptionConfig has all config options in it required are \"content_type\" and \"url\" Required")
    events: Optional[conlist(StrictStr)] = None
    type: StrictStr = Field(...)
    __properties = ["active", "authorization_header", "branch_filter", "config", "events", "type"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('dingtalk', 'discord', 'gitea', 'gogs', 'msteams', 'slack', 'telegram', 'feishu', 'wechatwork', 'packagist'):
            raise ValueError("must be one of enum values ('dingtalk', 'discord', 'gitea', 'gogs', 'msteams', 'slack', 'telegram', 'feishu', 'wechatwork', 'packagist')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateHookOption:
        """Create an instance of CreateHookOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateHookOption:
        """Create an instance of CreateHookOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateHookOption.parse_obj(obj)

        _obj = CreateHookOption.parse_obj({
            "active": obj.get("active") if obj.get("active") is not None else False,
            "authorization_header": obj.get("authorization_header"),
            "branch_filter": obj.get("branch_filter"),
            "config": obj.get("config"),
            "events": obj.get("events"),
            "type": obj.get("type")
        })
        return _obj

