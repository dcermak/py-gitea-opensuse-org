# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.

    The version of the OpenAPI document: 1.21.0-rc1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from py_gitea_opensuse_org.models.payload_commit import PayloadCommit
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Branch(BaseModel):
    """
    Branch represents a repository branch
    """ # noqa: E501
    commit: Optional[PayloadCommit] = None
    effective_branch_protection_name: Optional[StrictStr] = None
    enable_status_check: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    protected: Optional[StrictBool] = None
    required_approvals: Optional[StrictInt] = None
    status_check_contexts: Optional[List[StrictStr]] = None
    user_can_merge: Optional[StrictBool] = None
    user_can_push: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["commit", "effective_branch_protection_name", "enable_status_check", "name", "protected", "required_approvals", "status_check_contexts", "user_can_merge", "user_can_push"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Branch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of commit
        if self.commit:
            _dict['commit'] = self.commit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Branch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commit": PayloadCommit.from_dict(obj.get("commit")) if obj.get("commit") is not None else None,
            "effective_branch_protection_name": obj.get("effective_branch_protection_name"),
            "enable_status_check": obj.get("enable_status_check"),
            "name": obj.get("name"),
            "protected": obj.get("protected"),
            "required_approvals": obj.get("required_approvals"),
            "status_check_contexts": obj.get("status_check_contexts"),
            "user_can_merge": obj.get("user_can_merge"),
            "user_can_push": obj.get("user_can_push")
        })
        return _obj


