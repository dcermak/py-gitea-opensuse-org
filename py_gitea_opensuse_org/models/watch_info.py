# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, StrictBool, StrictStr

class WatchInfo(BaseModel):
    """
    WatchInfo represents an API watch status of one repository
    """
    created_at: Optional[datetime] = None
    ignored: Optional[StrictBool] = None
    reason: Optional[Dict[str, Any]] = None
    repository_url: Optional[StrictStr] = None
    subscribed: Optional[StrictBool] = None
    url: Optional[StrictStr] = None
    __properties = ["created_at", "ignored", "reason", "repository_url", "subscribed", "url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WatchInfo:
        """Create an instance of WatchInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WatchInfo:
        """Create an instance of WatchInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WatchInfo.parse_obj(obj)

        _obj = WatchInfo.parse_obj({
            "created_at": obj.get("created_at"),
            "ignored": obj.get("ignored"),
            "reason": obj.get("reason"),
            "repository_url": obj.get("repository_url"),
            "subscribed": obj.get("subscribed"),
            "url": obj.get("url")
        })
        return _obj

