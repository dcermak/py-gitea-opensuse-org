# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr

class ChangedFile(BaseModel):
    """
    ChangedFile store information about files affected by the pull request
    """
    additions: Optional[StrictInt] = None
    changes: Optional[StrictInt] = None
    contents_url: Optional[StrictStr] = None
    deletions: Optional[StrictInt] = None
    filename: Optional[StrictStr] = None
    html_url: Optional[StrictStr] = None
    previous_filename: Optional[StrictStr] = None
    raw_url: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    __properties = ["additions", "changes", "contents_url", "deletions", "filename", "html_url", "previous_filename", "raw_url", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChangedFile:
        """Create an instance of ChangedFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChangedFile:
        """Create an instance of ChangedFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChangedFile.parse_obj(obj)

        _obj = ChangedFile.parse_obj({
            "additions": obj.get("additions"),
            "changes": obj.get("changes"),
            "contents_url": obj.get("contents_url"),
            "deletions": obj.get("deletions"),
            "filename": obj.get("filename"),
            "html_url": obj.get("html_url"),
            "previous_filename": obj.get("previous_filename"),
            "raw_url": obj.get("raw_url"),
            "status": obj.get("status")
        })
        return _obj

