# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, conlist
from py_gitea_opensuse_org.models.gpg_key_email import GPGKeyEmail

class GPGKey(BaseModel):
    """
    GPGKey a user GPG key to sign commit and tag in repository
    """
    can_certify: Optional[StrictBool] = None
    can_encrypt_comms: Optional[StrictBool] = None
    can_encrypt_storage: Optional[StrictBool] = None
    can_sign: Optional[StrictBool] = None
    created_at: Optional[datetime] = None
    emails: Optional[conlist(GPGKeyEmail)] = None
    expires_at: Optional[datetime] = None
    id: Optional[StrictInt] = None
    key_id: Optional[StrictStr] = None
    primary_key_id: Optional[StrictStr] = None
    public_key: Optional[StrictStr] = None
    subkeys: Optional[conlist(GPGKey)] = None
    verified: Optional[StrictBool] = None
    __properties = ["can_certify", "can_encrypt_comms", "can_encrypt_storage", "can_sign", "created_at", "emails", "expires_at", "id", "key_id", "primary_key_id", "public_key", "subkeys", "verified"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GPGKey:
        """Create an instance of GPGKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in emails (list)
        _items = []
        if self.emails:
            for _item in self.emails:
                if _item:
                    _items.append(_item.to_dict())
            _dict['emails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subkeys (list)
        _items = []
        if self.subkeys:
            for _item in self.subkeys:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subkeys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GPGKey:
        """Create an instance of GPGKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GPGKey.parse_obj(obj)

        _obj = GPGKey.parse_obj({
            "can_certify": obj.get("can_certify"),
            "can_encrypt_comms": obj.get("can_encrypt_comms"),
            "can_encrypt_storage": obj.get("can_encrypt_storage"),
            "can_sign": obj.get("can_sign"),
            "created_at": obj.get("created_at"),
            "emails": [GPGKeyEmail.from_dict(_item) for _item in obj.get("emails")] if obj.get("emails") is not None else None,
            "expires_at": obj.get("expires_at"),
            "id": obj.get("id"),
            "key_id": obj.get("key_id"),
            "primary_key_id": obj.get("primary_key_id"),
            "public_key": obj.get("public_key"),
            "subkeys": [GPGKey.from_dict(_item) for _item in obj.get("subkeys")] if obj.get("subkeys") is not None else None,
            "verified": obj.get("verified")
        })
        return _obj

