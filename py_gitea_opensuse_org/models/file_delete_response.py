# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel
from py_gitea_opensuse_org.models.file_commit_response import FileCommitResponse
from py_gitea_opensuse_org.models.payload_commit_verification import PayloadCommitVerification

class FileDeleteResponse(BaseModel):
    """
    FileDeleteResponse contains information about a repo's file that was deleted
    """
    commit: Optional[FileCommitResponse] = None
    content: Optional[Dict[str, Any]] = None
    verification: Optional[PayloadCommitVerification] = None
    __properties = ["commit", "content", "verification"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FileDeleteResponse:
        """Create an instance of FileDeleteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of commit
        if self.commit:
            _dict['commit'] = self.commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verification
        if self.verification:
            _dict['verification'] = self.verification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FileDeleteResponse:
        """Create an instance of FileDeleteResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FileDeleteResponse.parse_obj(obj)

        _obj = FileDeleteResponse.parse_obj({
            "commit": FileCommitResponse.from_dict(obj.get("commit")) if obj.get("commit") is not None else None,
            "content": obj.get("content"),
            "verification": PayloadCommitVerification.from_dict(obj.get("verification")) if obj.get("verification") is not None else None
        })
        return _obj

