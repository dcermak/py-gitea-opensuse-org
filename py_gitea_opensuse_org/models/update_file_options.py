# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.

    The version of the OpenAPI document: 1.21.0-rc1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from py_gitea_opensuse_org.models.commit_date_options import CommitDateOptions
from py_gitea_opensuse_org.models.identity import Identity
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateFileOptions(BaseModel):
    """
    UpdateFileOptions options for updating files Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
    """ # noqa: E501
    author: Optional[Identity] = None
    branch: Optional[StrictStr] = Field(default=None, description="branch (optional) to base this file from. if not given, the default branch is used")
    committer: Optional[Identity] = None
    content: StrictStr = Field(description="content must be base64 encoded")
    dates: Optional[CommitDateOptions] = None
    from_path: Optional[StrictStr] = Field(default=None, description="from_path (optional) is the path of the original file which will be moved/renamed to the path in the URL")
    message: Optional[StrictStr] = Field(default=None, description="message (optional) for the commit of this file. if not supplied, a default message will be used")
    new_branch: Optional[StrictStr] = Field(default=None, description="new_branch (optional) will make a new branch from `branch` before creating the file")
    sha: StrictStr = Field(description="sha is the SHA for the file that already exists")
    signoff: Optional[StrictBool] = Field(default=None, description="Add a Signed-off-by trailer by the committer at the end of the commit log message.")
    __properties: ClassVar[List[str]] = ["author", "branch", "committer", "content", "dates", "from_path", "message", "new_branch", "sha", "signoff"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateFileOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of committer
        if self.committer:
            _dict['committer'] = self.committer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dates
        if self.dates:
            _dict['dates'] = self.dates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateFileOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": Identity.from_dict(obj.get("author")) if obj.get("author") is not None else None,
            "branch": obj.get("branch"),
            "committer": Identity.from_dict(obj.get("committer")) if obj.get("committer") is not None else None,
            "content": obj.get("content"),
            "dates": CommitDateOptions.from_dict(obj.get("dates")) if obj.get("dates") is not None else None,
            "from_path": obj.get("from_path"),
            "message": obj.get("message"),
            "new_branch": obj.get("new_branch"),
            "sha": obj.get("sha"),
            "signoff": obj.get("signoff")
        })
        return _obj


