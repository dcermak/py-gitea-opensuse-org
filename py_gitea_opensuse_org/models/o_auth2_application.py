# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, conlist

class OAuth2Application(BaseModel):
    """
    OAuth2Application
    """
    client_id: Optional[StrictStr] = None
    client_secret: Optional[StrictStr] = None
    confidential_client: Optional[StrictBool] = None
    created: Optional[datetime] = None
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    redirect_uris: Optional[conlist(StrictStr)] = None
    __properties = ["client_id", "client_secret", "confidential_client", "created", "id", "name", "redirect_uris"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OAuth2Application:
        """Create an instance of OAuth2Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OAuth2Application:
        """Create an instance of OAuth2Application from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OAuth2Application.parse_obj(obj)

        _obj = OAuth2Application.parse_obj({
            "client_id": obj.get("client_id"),
            "client_secret": obj.get("client_secret"),
            "confidential_client": obj.get("confidential_client"),
            "created": obj.get("created"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "redirect_uris": obj.get("redirect_uris")
        })
        return _obj

