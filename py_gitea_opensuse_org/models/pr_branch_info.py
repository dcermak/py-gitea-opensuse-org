# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr
from py_gitea_opensuse_org.models.repository import Repository

class PRBranchInfo(BaseModel):
    """
    PRBranchInfo information about a branch
    """
    label: Optional[StrictStr] = None
    ref: Optional[StrictStr] = None
    repo: Optional[Repository] = None
    repo_id: Optional[StrictInt] = None
    sha: Optional[StrictStr] = None
    __properties = ["label", "ref", "repo", "repo_id", "sha"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PRBranchInfo:
        """Create an instance of PRBranchInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of repo
        if self.repo:
            _dict['repo'] = self.repo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PRBranchInfo:
        """Create an instance of PRBranchInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PRBranchInfo.parse_obj(obj)

        _obj = PRBranchInfo.parse_obj({
            "label": obj.get("label"),
            "ref": obj.get("ref"),
            "repo": Repository.from_dict(obj.get("repo")) if obj.get("repo") is not None else None,
            "repo_id": obj.get("repo_id"),
            "sha": obj.get("sha")
        })
        return _obj

