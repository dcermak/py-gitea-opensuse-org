# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class NotificationSubject(BaseModel):
    """
    NotificationSubject contains the notification subject (Issue/Pull/Commit)
    """
    html_url: Optional[StrictStr] = None
    latest_comment_html_url: Optional[StrictStr] = None
    latest_comment_url: Optional[StrictStr] = None
    state: Optional[StrictStr] = Field(None, description="StateType issue state type")
    title: Optional[StrictStr] = None
    type: Optional[StrictStr] = Field(None, description="NotifySubjectType represent type of notification subject")
    url: Optional[StrictStr] = None
    __properties = ["html_url", "latest_comment_html_url", "latest_comment_url", "state", "title", "type", "url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NotificationSubject:
        """Create an instance of NotificationSubject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationSubject:
        """Create an instance of NotificationSubject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NotificationSubject.parse_obj(obj)

        _obj = NotificationSubject.parse_obj({
            "html_url": obj.get("html_url"),
            "latest_comment_html_url": obj.get("latest_comment_html_url"),
            "latest_comment_url": obj.get("latest_comment_url"),
            "state": obj.get("state"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "url": obj.get("url")
        })
        return _obj

