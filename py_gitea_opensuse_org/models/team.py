# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, conlist, validator
from py_gitea_opensuse_org.models.organization import Organization

class Team(BaseModel):
    """
    Team represents a team in an organization
    """
    can_create_org_repo: Optional[StrictBool] = None
    description: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    includes_all_repositories: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    organization: Optional[Organization] = None
    permission: Optional[StrictStr] = None
    units: Optional[conlist(StrictStr)] = None
    units_map: Optional[Dict[str, StrictStr]] = None
    __properties = ["can_create_org_repo", "description", "id", "includes_all_repositories", "name", "organization", "permission", "units", "units_map"]

    @validator('permission')
    def permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('none', 'read', 'write', 'admin', 'owner'):
            raise ValueError("must be one of enum values ('none', 'read', 'write', 'admin', 'owner')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Team:
        """Create an instance of Team from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Team:
        """Create an instance of Team from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Team.parse_obj(obj)

        _obj = Team.parse_obj({
            "can_create_org_repo": obj.get("can_create_org_repo"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "includes_all_repositories": obj.get("includes_all_repositories"),
            "name": obj.get("name"),
            "organization": Organization.from_dict(obj.get("organization")) if obj.get("organization") is not None else None,
            "permission": obj.get("permission"),
            "units": obj.get("units"),
            "units_map": obj.get("units_map")
        })
        return _obj

